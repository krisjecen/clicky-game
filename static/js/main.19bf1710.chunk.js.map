{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","onClick","userPlay","id","alt","name","src","image","Wrapper","children","clickArray","App","state","friends","clicked","score","topScore","gameStatus","includes","_this","push","setState","_this2","this","components_Wrapper","map","friend","components_FriendCard","key","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"+kFAYeA,MATf,SAAqBC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAML,EAAMM,SAASN,EAAMO,KAAKH,UAAU,iBACtDH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,iBCA1BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,kBCKrCC,SAAa,IAiEFC,6MA9DbC,MAAQ,CACNC,UACAC,QAAS,GACTC,MAAO,EACPC,SAAU,EACVC,WAAY,uCAGdf,SAAW,SAAAC,GAGJO,EAAWQ,SAASf,IAAOgB,EAAKP,MAAMG,QAAUI,EAAKP,MAAMI,UAWpDN,EAAWQ,SAASf,IAAOgB,EAAKP,MAAMG,MAAQI,EAAKP,MAAMI,UAKjEN,EAAWU,KAAKjB,GAChBgB,EAAKE,SAAU,CACbP,QAASJ,EACTK,MAAOI,EAAKP,MAAMG,MAAQ,EAC1BE,WAAY,4BAMhBP,EAAa,GACbS,EAAKE,SAAU,CAAEP,QAASJ,EAAYK,MAAO,EAAGE,WAAY,8DAzB5DP,EAAWU,KAAKjB,GAEhBgB,EAAKE,SAAU,CACbP,QAASJ,EACTK,MAAOI,EAAKP,MAAMG,MAAQ,EAC1BC,SAAUG,EAAKP,MAAMI,SAAW,EAChCC,WAAY,oGAwBT,IAAAK,EAAAC,KACP,OACE1B,EAAAC,EAAAC,cAACyB,EAAD,KACE3B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASuB,KAAKX,MAAMK,WAAlC,0CACApB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,eAAmCuB,KAAKX,MAAMG,MAA9C,iBAAmEQ,KAAKX,MAAMI,UAC7EO,KAAKX,MAAMC,QAAQY,IAAI,SAAAC,GAAM,OAC5B7B,EAAAC,EAAAC,cAAC4B,EAAD,CACEzB,SAAUoB,EAAKpB,SACfC,GAAIuB,EAAOvB,GACXyB,IAAKF,EAAOvB,GACZI,MAAOmB,EAAOnB,kBAvDRsB,IAAMC,iBCNxBC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.19bf1710.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n\nfunction FriendCard (props) {\n  return (\n    <div className='card'>\n      <div onClick={() => props.userPlay(props.id)} className='img-container'>\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  )\n}\nexport default FriendCard\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from 'react'\nimport FriendCard from './components/FriendCard'\nimport Wrapper from './components/Wrapper'\nimport friends from './friends.json'\nimport './App.css'\n/* i tried to make the code drier by updating the clicked state array using setState\nbut i encountered an error when i used the .push method directly saying that \nthis.state.clicked.push(id) was not a function, so i made another array i could push to.\n*/\nvar clickArray = []\n\nclass App extends React.Component {\n  state = {\n    friends,\n    clicked: [],\n    score: 0,\n    topScore: 0,\n    gameStatus: 'Click any picture below to begin!'\n  }  \n\n  userPlay = id => {\n    // if the user's play has not already been clicked\n    // and the current score is the same as the top score...\n    if (!clickArray.includes(id) && this.state.score === this.state.topScore) {\n      // ...add the id of the play to the array\n      clickArray.push(id)\n      // ...increment both scores by one\n      this.setState( { \n        clicked: clickArray, \n        score: this.state.score + 1, \n        topScore: this.state.topScore + 1,\n        gameStatus: 'Good job, keep going!'\n       })\n    } // if the current score is less than the top score\n      else if (!clickArray.includes(id) && this.state.score < this.state.topScore) {\n        /* do everything above but don't increment the top score.\n        i tried to make this code drier by setting the topScore equal to the score, but it wouldn't\n        update, it would stay one behind the current score.\n        */\n        clickArray.push(id)\n        this.setState( { \n          clicked: clickArray, \n          score: this.state.score + 1,\n          gameStatus: 'Good job, keep going!'\n        }) \n    } else {\n      /* if the id is already in the array, the player loses and gets a loss message, the score resets,\n      and the clicked array gets emptied\n      */\n      clickArray = []\n      this.setState( { clicked: clickArray, score: 0, gameStatus: 'Oops, you lost. Click a picture to start playing again!' })\n    }\n\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <h1 className='title'>Clicky Game</h1>\n        <h2 className='title'>{this.state.gameStatus} | Don't click the same picture twice!</h2>\n        <h2 className='title'>Your score: {this.state.score} | Top score: {this.state.topScore}</h2>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            userPlay={this.userPlay}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}